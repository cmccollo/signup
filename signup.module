<?php

/**
* Implementation of hook_perm().
* See http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_perm/6
*/
function signup_perm() {
	return array('administer signup messages');
}

/**
 * Implement hook_menu().
 *
 * Note that each item has both an entry point to prepare the form, and also
 * a callback function that provides and AHAH menu callback.
 */
function signup_menu() {
	$items = array();
	$items['signup/form'] = array(
		'title' => 'eNews Signup',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('signup_form'),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['signup/form/callback'] = array(
		'title' => 'eNews Signup',
		'page callback' => 'signup_form_callback',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Does the very standard things that must be done in any normal callback.
 */
function signup_callback_helper() {
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
	$form_build_id = $_POST['form_build_id'];
	$form = form_get_cache($form_build_id, $form_state);
	$args = $form['#parameters'];
	$form_id = array_shift($args);
	$form_state['post'] = $form['#post'] = $_POST;
	// Enable the submit/validate handlers to determine whether AHAH-submittted.
	$form_state['ahah_submission'] = TRUE;
	$form['#programmed'] = $form['#redirect'] = FALSE;
	drupal_process_form($form_id, $form, $form_state);
	$form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
	return $form;
}

/**
 * Implements hook_init() to add module css.
 */
function signup_init() {
	drupal_add_css(drupal_get_path('module', 'signup') . '/signup.css');
}


/**
 * Form builder function to create a form showing dependent dropdowns. The
 * second dropdown has its values populated based on the first.
 * @param $form_state
 * @param $my_values
 */
function signup_form(&$form_state, $my_values = array()) {
	$form = array();

	// get the list of options to populate the first dropdown
	$initial_options = _signup_get_first_dropdown_options();

	// if we have a value for the first dropdown from $form_state['values'] we use
	// this both as the default value for the first dropdown and also as a
	// parameter to pass to the function that retrieves the options for the
	// second dropdown.
	$master_selection = !empty($form_state['values']['master_dropdown']) ? $form_state['values']['master_dropdown'] : t('US');

	$form['intro'] = array(
		'#prefix' => '<div id="form-intro">',
		'#suffix' => '</div>',
		'#type' => 'markup',
		'#weight' => 0,
		'#value' => variable_get('sign_up_intro', l('Please configure this message', 'admin/settings/signup-messages', $options = array()))
	);
	$form['email_address'] = array(
		'#type' => 'fieldset',
		'#title' => t(''),
		'#weight' => 1,
		'#attributes' => array(
			'id' => 'email-address'
		)
	);
	$form['email_address']['temp_email'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#size' => 40,
		'#required' => TRUE,
	);
	$form['email_address']['email'] = array(
		'#type' => 'textfield',
		'#title' => t('Verify Email'),
		'#size' => 40,
		'#required' => TRUE,
		'#attributes' => array(
			'autocomplete' => 'off'
		)
	);
	$form['personal_info'] = array(
		'#type' => 'fieldset',
		'#title' => t('Personal Information'),
		'#weight' => 2,
		'#attributes' => array(
			'id' => 'personal-info'
		)
	);
	$form['personal_info']['salutation'] = array(
		'#type' => 'select',
		'#title' => t('Salutation'),
		'#options' => array(
			'select' => '- select -',
			'Dr.' => t('Dr.'),
			'Mr.' => t('Mr.'),
			'Mrs.' => t('Mrs.'),
			'Ms.' => t('Ms.'),
		),
		'#required' => FALSE,
	);
	$form['personal_info']['first'] = array(
		'#type' => 'textfield',
		'#title' => t('First Name'),
		'#size' => 40,
		'#required' => TRUE,
	);
	$form['personal_info']['last'] = array(
		'#type' => 'textfield',
		'#title' => t('Last Name'),
		'#size' => 40,
		'#required' => TRUS,
	);
	$form['personal_info']['country_phone'] = array(
		'#type' => 'textfield',
		'#title' => t('Phone'),
		'#size' => 6,
		'#default_value' => '1',
		'#maxlength' => 3,
		'#required' => FALSE,
		'#description' => t('country code')
	);
	$form['personal_info']['phone'] = array(
		'#type' => 'textfield',
		'#title' => t(''),
		'#size' => 27,
		'#required' => FALSE,
	);
	$form['employment'] = array(
		'#type' => 'fieldset',
		'#title' => t('Employer Information'),
		'#weight' => 3,
		'#attributes' => array(
			'id' => 'employment'
		)
	);
	$form['employment']['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Title'),
		'#size' => 40,
		'#required' => FALSE,
	);
	$form['employment']['employer'] = array(
		'#type' => 'textfield',
		'#title' => t('Employer'),
		'#size' => 40,
		'#required' => FALSE,
	);
	$form['employment']['employer_type'] = array(
		'#type' => 'select',
		'#title' => t('Employer Type'),
		'#required' => FALSE,
		'#options' => array(
			'select' => '- select -',
			'school_district_office' => t('School District Office'),
			'pre_K_12_School' => t('Pre K-12 School'),
			'university' => t('University'),
			'state_agency' => t('State Agency'),
			'federal_government' => t('Federal Government'),
			'pre_K_12_School' => t('Pre K-12 School'),
			'foundation' => t('Foundation'),
			'non_profit_organization' => t('Non-Profit organization'),
			'business' => t('Business'),
			'self_employed' => t('Self-Employed'),
			'other' => t('Other'),
		),
	);
	$form['employment']['role'] = array(
		'#type' => 'select',
		'#title' => t('Role'),
		'#required' => FALSE,
		'#options' => array(
			'select' => '- select -',
			'policy_maker' => t('Policy Maker'),
			'school_leader' => t('School Leader'),
			'induction_leader' => t('Induction Leader'),
			'beginning_teacher' => t('Beginning Teacher'),
			'mentor_teacher' => t('Mentor Teacher'),
			'pre_k_12_teacher' => t('Pre K-12 Teacher'),
			'union_leader' => t('Union Leader'),
			'central_office_administrator_coordinator' => t('Central Office Administrator / Coordinator'),
			'university_faculty_supervisor' => t('University Faculty / Supervisor'),
			'professional_developer' => t('Professional Developer'),
			'researcher' => t('Researcher'),
			'other' => t('Other'),
		),
	);
	$form['mailing_address'] = array(
		'#type' => 'fieldset',
		'#title' => t('Mailing Address'),
		'#weight' => 3,
		'#attributes' => array(
			'id' => 'mailing-address'
		)
	);
	$form['mailing_address']['address_1'] = array(
		'#type' => 'textfield',
		'#title' => t('Address 1'),
		'#size' => 40,
		'#required' => FALSE,
	);
	$form['mailing_address']['address_2'] = array(
		'#type' => 'textfield',
		'#title' => t('Address 2'),
		'#size' => 40,
		'#required' => FALSE,
	);
	$form['mailing_address']['city'] = array(
		'#type' => 'textfield',
		'#title' => t('City'),
		'#size' => 25,
		'#required' => FALSE,
	);
	$form['mailing_address']['master_dropdown'] = array(
		'#type' => 'select',
		'#title' => 'Country',
		'#options' => $initial_options,
		'#default_value' => $master_selection,
		'#ahah' => array(
			'path' => 'signup/form/callback',
			'wrapper' => 'dependent-dropdown-wrapper',
			// 'event' => 'change', // default value: does not need to be set explicitly.
		),
		'#attributes' => array('class' => 'master-dropdown'),
	);

	// The CSS for this module hides this next button if JS is enabled.
	$form['mailing_address']['continue_to_dependent_dropdown'] = array(
		'#type' => 'submit',
		'#value' => t('Choose'),
		'#attributes' => array('class' => 'next-button'),
		'#submit' => array('signup_form_continue'),
	);

	$form['mailing_address']['dependent_dropdown_holder'] = array(
		'#tree' => TRUE,
		'#prefix' => '<div id="dependent-dropdown-wrapper" class="form-item">',
		'#suffix' => '</div>',
	);

	$form['mailing_address']['dependent_dropdown_holder']['dependent_dropdown'] = array(
		'#type' => 'select',
		'#title' => t('State/Provence'),

		// when the form is rebuilt during processing (either AJAX or multistep),
		// the $master_selction variable will now have the new value and so the
		// options will change.
		'#options' => _signup_get_second_dropdown_options($master_selection),
		'#default_value' => isset($my_values['dependent_dropdown']) ? $my_values['dependent_dropdown'] : '',
	);
	$form['mailing_address']['zip_code'] = array(
		'#type' => 'textfield',
		'#title' => t('Zip Code'),
		'#size' => 10,
		'#maxlength' => 5,
		'#required' => TRUE,
	);
	$form['submit'] = array(
		'#prefix' => '<div id="form-actions">',
		'#suffix' => '</div>',
		'#type' => 'submit',
		'#value' => 'Sign Up',
		'#weight' => 50
	);
	// Add basic css file
	drupal_add_css(drupal_get_path('module','signup') . '/css/signup.css');
	// Add additional validation using javaScript
	drupal_add_js(drupal_get_path('module','signup') . '/js/jquery.validate.min.js');
	drupal_add_js(drupal_get_path('module','signup') . '/js/jquery.cookie.js');
	drupal_add_js(drupal_get_path('module','signup') . '/js/signup.form.js');
	
	if($form_state['ahah_submission']){
	    // Clear the form errors.  We don't need to show any validation errors if this is an ahah submit, not a final submit
	    drupal_get_messages('error');
	    // Clear the form error state.
	    form_set_error(null, '', true);
	}
	return $form;
}

/**
 * The AHAH callback. It processes the form using signup_callback_helper()
 * and then
 */
function signup_form_callback() {
	$form = signup_callback_helper();

	$changed_elements = $form['mailing_address']['dependent_dropdown_holder'];

	// Prevent duplicate wrappers.
	unset($changed_elements['#prefix'], $changed_elements['#suffix']);

	$output = theme('status_messages') . drupal_render($changed_elements);

	drupal_json(array(
		'status'   => TRUE,
		'data'     => $output,
	));
}

/**
* Submit handler for 'continue_to_dependent_dropdown'.
*/
function signup_form_continue($form, &$form_state) {
	$values = $form_state['values'];
	unset($form_state['submit_handlers']);
	form_execute_handlers('submit', $form, $form_state);
	$form_state['my_values'] = $values;
	$form_state['rebuild'] = TRUE;
}

function signup_form_validate($form, &$form_state) {
	$temp_mail = $form_state['values']['temp_email'];
	$email = $form_state['values']['email'];
	
	// if ($temp_email !== $mail) {
	// 	form_set_error('email', t('The specified emails do not match'));
	// 	// drupal_set_message('<pre>' . print_r($form_state, TRUE) . '</pre>');
	// }
	
	if (!signup_valid_email_address($email)) {
		form_set_error('email', t('The email address ' . $email . ' is not a valid email address.'));
	}
		
	// Validate the phone number provided is at least 5 digits
	$phone = $form_state['values']['phone'];
	if( !empty($phone) && !preg_match("^\+?\d{4,}$^", $phone) ) {
		form_set_error('phone', (variable_get('sign_up_phone_invalid', 'Please enter a valid Phone Number.')));
	}
	
	// Validate the zip code provided is at least 5 digits
	$zip_code = $form_state['values']['zip_code'];
	if( !preg_match("#[0-9]{5}#", $zip_code) ) {
		form_set_error('zip_code', (variable_get('sign_up_zip_invalid', 'Please enter a valid Zip Code.')));
	}
}


/**
 * Default submit handler for form. This one happens when the main submit
 * button is pressed.
 */
function signup_form_submit($form, &$form_state) {
	// If an AHAH submission, it's just the dependent dropdown working.
	if (!empty($form_state['ahah_submission'])) {
		return;
	}

	if ($form_state['clicked_button']['#id'] == 'edit-submit') {
			$form_state['rebuild'] = FALSE;
			$email = $form_state['values']['email'];
			$sal = $form_state['values']['salutation'];
			$fname = $form_state['values']['first'];
			$lname = $form_state['values']['last'];
			$cc_phone = $form_state['values']['country_phone'];
			$phone = $form_state['values']['phone'];
			$title = $form_state['values']['title'];
			$employer = $form_state['values']['employer'];
			$employer_type = $form_state['values']['employer_type'];
			$role = $form_state['values']['role'];
			$address_1 = $form_state['values']['address_1'];
			$address_2 = $form_state['values']['address_2'];
			$city = $form_state['values']['city'];
			$country = $form_state['values']['master_dropdown'];
			$state = $form_state['values']['dependant_dropdown'];
			$zip_code = $form_state['values']['zip_code'];
			if (db_result(db_query("SELECT COUNT(*) FROM {signup} WHERE LOWER(email1) = LOWER('%s')", $email)) > 0) {
				db_query("UPDATE {signup} SET first_name = '%s', last_name = '%s', title = '%s', employer = '%s', address_1 = '%s', address_2 = '%s', city = '%s', state = '%s', zip_code = '%s', phone = '%s' WHERE email1 = '%s'", $fname, $lname, $title, $employer, $address_1, $address_2, $city, $state, $zip_code, $phone, $email);
				drupal_set_message(t('Thank you, your information has been updated.'));
			} else {
				db_query("INSERT INTO {signup} (email1, first_name, last_name, title, employer, address_1, address_2, city, state, zip_code, phone) VALUES('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')", $email, $fname, $lname, $title, $employer, $address_1, $address_2, $city, $state, $zip_code, $phone);
				drupal_set_message(t('Thank you for signing up.'));
				// drupal_set_message('<pre>' . print_r($form_state, TRUE) . '</pre>');
			}
	}

	// edit-next or anything else will cause rebuild.
	$form_state['rebuild'] = TRUE;
}


function signup_block($op = 'list', $delta = '', $edit = array()) {
	// The $op parameter determines what piece of information is being requested.
	switch ($op) {
		case 'list':
			$blocks['signup'] = array(
				'info' => t('eNews Sign up'),
			);
			return $blocks;
		case 'view':
			switch ($delta) {
				case 'signup':
				// Add basic css file
				drupal_add_css(drupal_get_path('module','signup') . '/css/signup.css');
				// Add additional validation using javaScript
				drupal_add_js(drupal_get_path('module','signup') . '/js/jquery.validate.min.js');
				drupal_add_js(drupal_get_path('module','signup') . '/js/jquery.cookie.js');
				drupal_add_js(drupal_get_path('module','signup') . '/js/signup.form.js');
					$block['subject'] = t('eNews Sign up');
					$block['content'] = drupal_get_form('signup_data_block');
				break;
			}
		return $block;
	}
}

// Create sign up block form used in hook_block()
function signup_data_block($form_state) {
	$form['email'] = array(
		'#type' => 'textfield',
		'#title' => t('Email'),
		'#size' => 40,
		'#required' => TRUE,
	);	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Sign Up'
	);
	$form['#redirect'] = 'signup/form';
	return $form;
}

// Validate block form
function signup_data_block_validate($form, &$form_state) {
	$mail = $form_state['values']['email'];
	if (!signup_valid_email_address($mail)) {
		form_set_error('mail', t('The e-mail address ' . $mail . ' is not a valid email address.'));
	}
}

// Submit block form
function signup_data_block_submit($form, &$form_state) {
	drupal_set_message(variable_get('sign_up_update', 'Please provide additional information.'));
}

/**
 * Helper function to populate the first dropdown. This would normally be
 * pulling data from the database.
 *
 * @return array of options
 */
function _signup_get_first_dropdown_options() {
	// drupal_map_assoc() just makes an array('Strings' => 'Strings'...).
	return drupal_map_assoc(array(t('US'), t('Canada')));
}

/**
 * Helper function to populate the second dropdown. This would normally be
 * pulling data from the database.
 *
 * @param key. This will determine which set of options is returned.
 *
 * @return array of options
 */
function _signup_get_second_dropdown_options($key = '') {
	$options = array(
		t('US') => drupal_map_assoc(array(
			t('- select -'),
			t('Alabama'),
			t('Alaska'),
			t('American Samoa'),
			t('Arizona'),
			t('Arkansas'),
			t('California'),
			t('Colorado'),
			t('Connecticut'),
			t('Delaware'),
			t('District of Columbia'),
			t('Florida'),
			t('Georgia'),
			t('Guam'),
			t('Hawaii'),
			t('Idaho'),
			t('Illinois'),
			t('Indiana'),
			t('Iowa'),
			t('Kansas'),
			t('Kentucky'),
			t('Louisiana'),
			t('Maine'),
			t('Maryland'),
			t('Massachusetts'),
			t('Michigan'),
			t('Minnesota'),
			t('Mississippi'),
			t('Missouri'),
			t('Montana'),
			t('Nebraska'),
			t('Nevada'),
			t('New Hampshire'),
			t('New Jersey'),
			t('New Mexico'),
			t('New York'),
			t('North Carolina'),
			t('North Dakota'),
			t('Northern Marianas Islands'),
			t('Ohio'),
			t('Oklahoma'),
			t('Oregon'),
			t('Pennsylvania'),
			t('Puerto Rico'),
			t('Rhode Island'),
			t('South Carolina'),
			t('South Dakota'),
			t('Tennessee'),
			t('Texas'),
			t('Utah'),
			t('Vermont'),
			t('Virginia'),
			t('Virgin Islands'),
			t('Washington'),
			t('West Virginia'),
			t('Wisconsin'),
			t('Wyoming')
		)),
		t('Canada') => drupal_map_assoc(array(
			t('- select -'),
			t('Alberta'),
			t('British Columbia'),
			t('New Brunswick'),
			t('Newfoundland and Labrador'),
			t('Nova Scotia'),
			t('Ontario'),
			t('Prince Edward Island'),
			t('Quebec'),
			t('Saskatchewan')
		)),
	);
	if (isset($options[$key])) {
		return $options[$key];
	}
	else {
		return array();
	}
}

// Validation functions
function signup_valid_email_address($mail) {
	$user = '[a-zA-Z0-9_\-\.\+\^!#\$%&*+\/\=\?\`\|\{\}~\']+';
	$domain = '(?:(?:[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.?)+';
	$ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
	$ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';

	return preg_match("/^$user@($domain|(\[($ipv4|$ipv6)\]))$/", $mail);
}

